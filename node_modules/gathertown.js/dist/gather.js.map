{"mappings":"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","sources":["src/index.ts","src/api/createSpace.ts","src/api/apiBase.ts","src/config.ts","src/api/validateStatus.ts","src/api/getEmailGuestList.ts","src/api/getMap.ts","src/api/setEmailGuestlist.ts","src/api/setMap.ts"],"sourcesContent":["import type { IGuest } from './types';\nimport { CreateSpaceProps, handleCreateSpace } from './api/createSpace';\nimport { GetEmailGuestlistProps, handleGetEmailGuestlist } from './api/getEmailGuestList';\nimport { GetMapProps, handleGetMap } from './api/getMap';\nimport { handleSetEmailGuestlist, SetEmailGuestlistProps } from './api/setEmailGuestlist';\nimport { SetMapProps, handleSetMap } from './api/setMap';\n\ninterface IGather {\n  createSpace(props: Omit<CreateSpaceProps, 'apiKey'>): Promise<string>;\n  getEmailGuestlist(props: Omit<GetEmailGuestlistProps, 'apiKey'>): Promise<IGuest>;\n  getMap(props: Omit<GetMapProps, 'apiKey'>): Promise<any>;\n  setMap(props: Omit<SetMapProps, 'apiKey'>): Promise<any>;\n  setEmailGuestlist(props: Omit<SetEmailGuestlistProps, 'apiKey'>): Promise<IGuest>;\n}\n\nfunction Gather(initialApiKey: string): IGather {\n  const createSpace: IGather['createSpace'] = async ({ name, map, reason, sourceSpace }) => {\n    const res = await handleCreateSpace({\n      apiKey: initialApiKey,\n      map,\n      name,\n      reason,\n      sourceSpace,\n    });\n\n    return res.data;\n  };\n\n  const getEmailGuestlist: IGather['getEmailGuestlist'] = async ({ spaceId }) => {\n    const res = await handleGetEmailGuestlist({\n      apiKey: initialApiKey,\n      spaceId,\n    });\n\n    return res.data;\n  };\n\n  const getMap: IGather['getMap'] = async ({ mapId, spaceId }) => {\n    const res = await handleGetMap({\n      apiKey: initialApiKey,\n      mapId,\n      spaceId,\n    });\n\n    return res.data;\n  };\n\n  const setMap: IGather['setMap'] = async ({ mapId, spaceId, mapContent }) => {\n    const res = await handleSetMap({\n      apiKey: initialApiKey,\n      mapContent,\n      mapId,\n      spaceId,\n    });\n\n    return res.data;\n  };\n\n  const setEmailGuestlist: IGather['setEmailGuestlist'] = async ({\n    spaceId,\n    guestlist,\n    overwrite,\n  }) => {\n    const res = await handleSetEmailGuestlist({\n      apiKey: initialApiKey,\n      spaceId,\n      guestlist,\n      overwrite,\n    });\n\n    return res.data;\n  };\n\n  return {\n    createSpace,\n    getEmailGuestlist,\n    getMap,\n    setMap,\n    setEmailGuestlist,\n  };\n}\n\nexport const useGather = (apiKey: string) => {\n  return Gather(apiKey);\n};\n\nexport default Gather;\n","import type { MapType } from '../types';\nimport api from './apiBase';\nimport validateStatus from './validateStatus';\n\nexport interface CreateSpaceProps {\n  apiKey: string;\n  name: string;\n  map?: MapType;\n  reason?: string;\n  sourceSpace?: string;\n}\n\nexport const handleCreateSpace = ({ apiKey, name, map, reason, sourceSpace }: CreateSpaceProps) => {\n  // Required params\n  const data: CreateSpaceProps = {\n    apiKey,\n    name,\n  };\n\n  // Optional params based on API Docs, sourceSpace is optional if map is provided and map is optional when sourceSpace is provided\n  if (sourceSpace) {\n    const formattedSpaceID = sourceSpace.replace(/\\//gi, '\\\\');\n    data.sourceSpace = formattedSpaceID;\n  } else if (!map) {\n    throw new Error('You must provide either a map or a sourceSpace');\n  } else {\n    data.map = map;\n  }\n\n  // Optional param\n  if (reason) {\n    data.reason = reason;\n  }\n\n  return api.post<string>('createRoom', data, {\n    validateStatus,\n  });\n};\n","import axios from 'axios';\nimport config from '../config';\n\nexport const baseUrl = config.baseURL;\n\nconst axiosInstance = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    'Content-type': 'application/json',\n    Accept: 'application/json',\n    'Access-Control-Allow-Origin': '*',\n  },\n  responseType: 'json',\n});\n\nexport default axiosInstance;\n","const config = {\n  baseURL: 'https://gather.town/api/',\n};\n\nexport default config;\n","export default function (status: number) {\n  return status >= 200 && status < 300;\n}\n","import type { IGuest } from '../types';\nimport api from './apiBase';\nimport validateStatus from './validateStatus';\n\nexport interface GetEmailGuestlistProps {\n  apiKey: string;\n  spaceId: string;\n}\n\nexport const handleGetEmailGuestlist = ({ apiKey, spaceId }: GetEmailGuestlistProps) => {\n  // TODO: Catch nullish value for params\n  const formattedSpaceID = spaceId.replace(/\\//gi, '\\\\');\n  const _spaceId = '?spaceId=' + formattedSpaceID;\n  const _apiKey = '&apiKey=' + apiKey;\n\n  return api.get<IGuest>(`getEmailGuestlist${_spaceId}${_apiKey}`, {\n    validateStatus,\n  });\n};\n","import api from './apiBase';\nimport validateStatus from './validateStatus';\n\nexport interface GetMapProps {\n  apiKey: string;\n  mapId: string;\n  spaceId: string;\n}\n\nexport const handleGetMap = ({ apiKey, mapId, spaceId }: GetMapProps) => {\n  // TODO: Catch nullish value for params\n  const formattedSpaceID = spaceId.replace(/\\//gi, '\\\\');\n  const _spaceId = '?spaceId=' + formattedSpaceID;\n  const _mapId = '&mapId=' + mapId;\n  const _apiKey = '&apiKey=' + apiKey;\n\n  return api.get(`getMap${_spaceId}${_mapId}${_apiKey}`, {\n    validateStatus,\n  });\n};\n","import type { IGuest } from '../types';\nimport api from './apiBase';\nimport validateStatus from './validateStatus';\n\nexport interface SetEmailGuestlistProps {\n  apiKey: string;\n  spaceId: string;\n  guestlist: IGuest;\n  overwrite?: boolean;\n}\n\nexport const handleSetEmailGuestlist = ({\n  apiKey,\n  spaceId,\n  guestlist,\n  overwrite = false,\n}: SetEmailGuestlistProps) => {\n  const formattedSpaceID = spaceId.replace(/\\//gi, '\\\\');\n\n  const data = JSON.stringify({\n    apiKey,\n    spaceId: formattedSpaceID,\n    guestlist,\n    overwrite,\n  });\n\n  return api.post<IGuest>('setEmailGuestlist', data, {\n    validateStatus,\n  });\n};\n","import api from './apiBase';\nimport validateStatus from './validateStatus';\n\nexport interface SetMapProps {\n  apiKey: string;\n  mapId: string;\n  spaceId: string;\n  // TODO: get proper return type of getMap\n  // ReturnType<typeof getMap>;\n  mapContent: any;\n}\n\nexport const handleSetMap = ({ apiKey, mapContent, mapId, spaceId }: SetMapProps) => {\n  // Required params\n  const formattedSpaceID = spaceId.replace(/\\//gi, '\\\\');\n\n  return api.post(\n    'setMap',\n    {\n      apiKey,\n      spaceId: formattedSpaceID,\n      mapId,\n      mapContent,\n    },\n    {\n      validateStatus,\n    }\n  );\n};\n"],"names":[],"version":3,"file":"gather.js.map"}